{"version":3,"file":"css-tag_test.js","sourceRoot":"","sources":["../../src/test/css-tag_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {css, CSSResult, unsafeCSS} from '../css-tag.js';\nimport {assert} from '@esm-bundle/chai';\n\nsuite('Styling', () => {\n  suite('css tag', () => {\n    test('CSSResults always produce the same stylesheet', () => {\n      // Alias avoids syntax highlighting issues in editors\n      const cssValue = css;\n      const makeStyle = () => cssValue`foo`;\n      const style1 = makeStyle();\n      assert.equal(\n        (style1 as CSSResult).styleSheet,\n        (style1 as CSSResult).styleSheet\n      );\n      const style2 = makeStyle();\n      assert.equal(\n        (style1 as CSSResult).styleSheet,\n        (style2 as CSSResult).styleSheet\n      );\n    });\n\n    test('css with same values always produce the same stylesheet', () => {\n      // Alias avoids syntax highlighting issues in editors\n      const cssValue = css;\n      const makeStyle = () => cssValue`background: ${cssValue`blue`}`;\n      const style1 = makeStyle();\n      assert.equal(\n        (style1 as CSSResult).styleSheet,\n        (style1 as CSSResult).styleSheet\n      );\n      const style2 = makeStyle();\n      assert.equal(\n        (style1 as CSSResult).styleSheet,\n        (style2 as CSSResult).styleSheet\n      );\n    });\n\n    test('unsafeCSS() CSSResults always produce the same stylesheet', () => {\n      // Alias avoids syntax highlighting issues in editors\n      const makeStyle = () => unsafeCSS(`foo`);\n      const style1 = makeStyle();\n      assert.equal(\n        (style1 as CSSResult).styleSheet,\n        (style1 as CSSResult).styleSheet\n      );\n      const style2 = makeStyle();\n      assert.equal(\n        (style1 as CSSResult).styleSheet,\n        (style2 as CSSResult).styleSheet\n      );\n    });\n\n    test('`css` get styles throws when unsafe values are used', async () => {\n      assert.throws(() => {\n        css`\n          div {\n            border: ${`2px solid blue;` as any};\n          }\n        `;\n      });\n    });\n\n    test('`css` allows real JavaScript numbers', async () => {\n      const spacer = 2;\n      // Alias avoids syntax highlighting issues in editors\n      const cssValue = css;\n      const result = cssValue`\n        div {\n          margin: ${spacer * 2}px;\n        }\n      `;\n      assert.equal(\n        (result as CSSResult).cssText.replace(/\\s/g, ''),\n        'div{margin:4px;}'\n      );\n    });\n\n    test('`CSSResult` cannot be constructed', async () => {\n      // Note, this is done for security, instead use `css` or `unsafeCSS`\n      assert.throws(() => {\n        new (CSSResult as any)('throw', Symbol());\n      });\n    });\n\n    test('`CSSResult` allows for String type coercion via toString()', async () => {\n      const cssModule = css`\n        .my-module {\n          color: yellow;\n        }\n      `;\n      // Coercion allows for reusage of css-tag outcomes in regular strings.\n      // Example use case: apply cssModule as global page styles at\n      // document.body level.\n      const bodyStyles = `${cssModule}`;\n      assert.equal(bodyStyles.replace(/\\s/g, ''), '.my-module{color:yellow;}');\n    });\n  });\n});\n"]}